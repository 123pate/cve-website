// convert news item title into 5 words or less with '-' separator
export default {
  methods: {
    createShortTitle(newsItem) {
      const IGNORE_CHARS = /[^\w\s]/g; // any char that is NOT a space, Latin charset alphanumeric character, or underscore
      const MAX_WORDS = 5;
      let numTitleWords = null;
      let shortTitle = '';
      // delete non-alphaNumeric characters and replace multiple spaces with single
      const alphaNumericTitle = newsItem.title.replaceAll(IGNORE_CHARS, '').replaceAll('  ', ' ');
      try {
        numTitleWords = alphaNumericTitle.match(/\s/g).length + 1;
      } catch (err) {
        // no spaces in title
        numTitleWords = 0;
      }
      if (numTitleWords > MAX_WORDS) { // shorten
        shortTitle = alphaNumericTitle.split(' ').slice(0, MAX_WORDS).join('-');
      } else {
        shortTitle = alphaNumericTitle.replaceAll(' ', '-');
      }
      return shortTitle;
    },
    createItemUrlDetail(newsItem) {
      const [year, month, day] = newsItem.date.split('-');
      let detail = `${year}/${month}/${day}`;
      const shortTitle = this.createShortTitle(newsItem);
      detail += `/${shortTitle}`;
      return detail;
    },
    getNewsByTypeAndAddUrlDetail(newsType) {
      let newsTypeItems = [];	 
	if (newsType == 'all') {
          return this.newsList;
	}
      this.newsList.forEach((newsItem) => {
        if (newsItem.newsType == newsType) {
          newsItem.itemUrl = this.createItemUrlDetail(newsItem);
	  newsTypeItems.push(newsItem);
	}
      });
      return newsTypeItems;
    },
    paginate() {
      // calculate total pages

      this.pagination.totalItems = this.newsItemsForType.length;
      const totalPages = Math.ceil(this.pagination.totalItems / this.pagination.pageSize);

      // ensure current page isn't out of range
      if (this.pagination.currentPage < 1) {
        this.pagination.currentPage = 1;
      } else if (this.pagination.currentPage > totalPages) {
        this.pagination.currentPage = totalPages;
      }

      let startPage; let
        endPage;
      if (totalPages <= this.pagination.maxPages) {
        // total pages less than max so show all pages
        startPage = 1;
        endPage = totalPages;
      } else {
        // total pages more than max so calculate start and end pages
        const maxPagesBeforeCurrentPage = Math.floor(this.pagination.maxPages / 2);
        const maxPagesAfterCurrentPage = Math.ceil(this.pagination.maxPages / 2) - 1;
        if (this.pagination.currentPage <= maxPagesBeforeCurrentPage) {
          // current page near the start
          startPage = 1;
          endPage = this.pagination.maxPages;
        } else if (this.pagination.currentPage + maxPagesAfterCurrentPage >= totalPages) {
          // current page near the end
          startPage = totalPages - this.pagination.maxPages + 1;
          endPage = totalPages;
        } else {
          // current page somewhere in the middle
          startPage = this.pagination.currentPage - maxPagesBeforeCurrentPage;
          endPage = this.pagination.currentPage + maxPagesAfterCurrentPage;
        }
      }

      // calculate start and end item indexes
      this.pagination.startIndex = (this.pagination.currentPage - 1) * this.pagination.pageSize;
      this.pagination.endIndex = Math.min(this.pagination.startIndex + this.pagination.pageSize - 1, this.pagination.totalItems - 1);

      // create an array of pages to loop through in the pager control
      this.pagination.pages = Array.from(Array((endPage + 1) - startPage).keys()).map((i) => startPage + i);
      this.pagination.totalPages = totalPages;

      this.pagination.currentNewsToDisplay = this.newsItemsForType.slice(this.pagination.startIndex, this.pagination.endIndex + 1);
    },
    updatePagination(pageNumber) {
      this.pagination.currentPage = pageNumber;
      this.paginate();
    },
    getPreviousPage() {
      this.pagination.currentPage -= 1;
      this.paginate();      
    },
    getNextPage() {
      this.pagination.currentPage += 1;
      this.paginate();      
    },
    formatDate(newsDate) {
      const [year, month, day] = newsDate.split('-');
      const formattedDate = new Date();
      formattedDate.setFullYear(parseInt(year, 10));
      formattedDate.setMonth(parseInt(month - 1, 10));
      formattedDate.setDate(parseInt(day, 10));
      const options = { year: 'numeric', month: 'long', day: 'numeric' };
      return formattedDate.toLocaleDateString(undefined, options);
    },
  },
};
